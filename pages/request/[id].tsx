import { remove } from 'firebase/database';
import { deleteDoc, doc } from 'firebase/firestore';
import { ref } from 'firebase/database';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useContext, useRef, useState, useEffect } from 'react';
import ChatSection from '../../src/components/ChatSection/ChatSection';
import {
  editReservationRequest,
  getReservationRequest,
  getRoom,
  getUser,
} from '../../src/firebase/database';
import { firebaseDb, realtimeDb } from '../../src/firebase/firebase';
import { AuthContext } from '../../src/providers/auth/AuthProvider';
import { getAge, transformTimestampToDate } from '../../src/utils/time';
import { BasicUser, ReservationRequest, Room } from '../../src/utils/types';
import styles from '../../styles/Home.module.css';

const RequestPage = ({ id }: { id: string }) => {
  const { state } = useContext(AuthContext);

  const router = useRouter();
  const [requestData, setRequestData] = useState<ReservationRequest>();
  const roomData = useRef<Room>();
  const userData = useRef<BasicUser>();
  const [isLoading, setIsLoading] = useState<boolean>(true);

  useEffect(() => {
    if (!state.isUserLoggedIn) {
      console.log('You are not logged in!');
      router.push('/');
      return;
    } else {
      getReservationRequest(id)
        .then((response) => {
          setRequestData(response);
          Promise.all([getRoom(response.roomId), getUser(response.userId)])
            .then((responses) => {
              roomData.current = responses[0];
              userData.current = responses[1] ?? undefined;
            })
            .catch((error) => {
              console.error('Error getting room and user:', error);
            })
            .finally(() => {
              setIsLoading(false);
            });
        })
        .catch((error) => {
          console.error('Error getting reservation request:', error);
          setIsLoading(false);
        });
    }
  }, [state.isUserLoggedIn, id, router]);

  const handleAcceptRequest = async (reqId: any) => {
    const onSuccess = () => {
      console.log('Reservation accepted!');
      setRequestData((prev) => {
        return {
          ...prev,
          requestStatus: 'accepted',
        } as ReservationRequest;
      });
    };
    const onFailure = (error: any) => {
      console.log('Error accepting reservation!');
    };
    let newData = {};
    newData = { ...newData, requestStatus: 'accepted' };
    editReservationRequest({
      requestId: reqId,
      newData,
      onSuccess,
      onFailure,
    });
  };

  const handleDeclineRequest = async (reqId: any) => {
    const onSuccess = () => {
      console.log('Reservation declined!');
      setRequestData((prev) => {
        return {
          ...prev,
          requestStatus: 'declined',
        } as ReservationRequest;
      });
    };
    const onFailure = (error: any) => {
      console.log('Error declining reservation!');
    };
    let newData = {};
    newData = { ...newData, requestStatus: 'declined' };
    editReservationRequest({
      requestId: reqId,
      newData,
      onSuccess,
      onFailure,
    });
  };

  const handleDeleteRequest = async (reqId: string) => {
    try {
      await deleteDoc(doc(firebaseDb, 'reservationRequests', reqId));
      await deleteDoc(doc(firebaseDb, 'reservations', reqId));
      remove(ref(realtimeDb, `messages/${reqId}`));
      console.log('Reservation request deleted!');
      router.back();
    } catch (error) {
      console.error('Error deleting reservation request:', error);
    }
  };

  const handleCancelRequest = async (reqId: any) => {
    const onSuccess = () => {
      console.log('Reservation cancelled!');
      setRequestData((prev) => {
        return {
          ...prev,
          requestStatus: 'cancelled',
        } as ReservationRequest;
      });
    };
    const onFailure = (error: any) => {
      console.log('Error cancelling reservation!');
    };
    let newData = {};
    newData = { ...newData, requestStatus: 'cancelled' };
    editReservationRequest({
      requestId: reqId,
      newData,
      onSuccess,
      onFailure,
    });
  };

  return (
    <div className={styles.row}>
      <Head>
        <title>Unde Dorm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {isLoading ? (
          <h1 className={styles.title}>{'Loading...'}</h1>
        ) : (
          <>
            <h1 className={styles.title}>
              <Link href={`/hotel/view-room/${roomData.current?.id}`}>
                {roomData.current?.name}
              </Link>
            </h1>
            <p className={styles.description}>
              {`Request from ${userData.current?.firstName} ${userData.current?.lastName}`}
              <br />
              {`Age: ${getAge(userData.current?.dateOfBirth ?? 0)}`}
            </p>
            <p className={styles.description}>
              {`From ${transformTimestampToDate(
                requestData?.startDate
              )} to ${transformTimestampToDate(requestData?.endDate)}`}
            </p>
            <p className={styles.description}>
              {`Status: ${requestData?.requestStatus}`}
            </p>
            
            {state.user?.id === requestData?.userId ? (
              <div className={styles.grid}>
              {(requestData?.requestStatus === 'cancelled' || requestData?.requestStatus === 'declined') && (
              <button
                className={styles.card}
                onClick={() => {
                  handleDeleteRequest(id);
                }}
              >
                <h3>Delete &rarr;</h3>
                <p>Delete this request.</p>
              </button>
              )}
              {(requestData?.requestStatus === 'accepted' || requestData?.requestStatus === 'pending') && (
                <button
                  className={styles.card}
                  onClick={() => {
                    handleCancelRequest(id);
                  }}
                >
                  <h3>Cancel &rarr;</h3>
                  <p>Cancel this request.</p>
                </button>
              )}
              </div>
            ) : (
            <>
              {requestData?.requestStatus === 'pending' ? (
                <div className={styles.grid}>
                  <button
                    className={styles.card}
                    onClick={() => {
                      handleAcceptRequest(id);
                    }}
                  >
                    <h3>Approve &rarr;</h3>
                    <p>Approve this request.</p>
                  </button>

                  <button
                    className={styles.card}
                    onClick={() => {
                      handleDeclineRequest(id);
                    }}
                  >
                    <h3>Reject &rarr;</h3>
                    <p>Reject this request.</p>
                  </button>
                </div>
              ) : (
                <div className={styles.grid}>
                  {requestData?.requestStatus === 'cancelled' && (
                  <button
                    className={styles.card}
                    onClick={() => {
                      handleDeleteRequest(id);
                    }}
                  >
                    <h3>Delete &rarr;</h3>
                    <p>Delete this request.</p>
                  </button>
                  )}
                  {(requestData?.requestStatus === 'accepted') && (
                    <button
                      className={styles.card}
                      onClick={() => {
                        handleCancelRequest(id);
                      }}
                    >
                      <h3>Cancel &rarr;</h3>
                      <p>Cancel this request.</p>
                    </button>
                  )}
                </div>
              )}
            </>
            )}
          </>
        )}
      </main>
      <ChatSection requestId={id} currentUserId={state.user?.id ?? ''} />
    </div>
  );
};

export async function getServerSideProps(context: any) {
  const { id } = context.query;

  return {
    props: {
      id,
    },
  };
}

export default RequestPage;
